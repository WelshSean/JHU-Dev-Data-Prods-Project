}
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
#observed <- c(observed, pmltraining[folds[[i]],]$classe)
}
head(foldtrain)
head(foldtrain,2)
?print
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
#observed <- c(observed, pmltraining[folds[[i]],]$classe)
print(i)
head(foldtrain,2)
head(foldtest,2)
}
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
#observed <- c(observed, pmltraining[folds[[i]],]$classe)
print(i)
print(head(foldtrain,2))
print(head(foldtest,2))
}
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
foldfit <- train(classe ~ ., data = pmltraining, method="rf")
#observed <- c(observed, pmltraining[folds[[i]],]$classe)
print(i)
}
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
foldfit <- train(classe ~ ., data = pmltraining, method="rf")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest))
#observed <- c(observed, pmltraining[folds[[i]],]$classe)
print(i)
}
conf_mat <- confusionMatrix(table(predicted, observed))
predict(foldfit, foldtest)
foldtest
predict(foldfit, foldtest)
nrow(foldtest)
?predict
predict(foldfit, newdata=foldtest)
predict(foldfit, newdata=hed(foldtest))
predict(foldfit, newdata=head(foldtest))
predict(foldfit, newdata=head(foldtest,2))
predict(foldfit, newdata=head(foldtest,6))
predict(foldfit, newdata=hfoldtest)
predict(foldfit, newdata=foldtest)
View(foldtest)
?complete.cases
complete.cases(foldtrain)
sum(complete.cases(foldtrain))
nrow(predict(foldfit, newdata=foldtest))
predict(foldfit, newdata=foldtest)
predict(foldfit, newdata=foldtest[1,])
predict(foldfit, newdata=foldtest[2,])
foldtest[1,]
predict(foldfit, foldtest[2,])
predict(foldfit, foldtest[1:1000,])
predict(foldfit, foldtest[1:100,])
sum(complete.cases(foldtest[1:"10016"]))
sum(complete.cases(foldtest[1:"100"]))
sum(complete.cases(foldtest[1:"100",]))
library(randomForest)
set.seed(1)
obs <- c()
preds <- c()
for(i in 1:10)
intrain = sample(1:dim(train_data)[1], size=dim(train_data)[1] * 0.8, replace=F)
intrain = sample(1:dim(pmltraining)[1], size=dim(train_data)[1] * 0.8, replace=F)
library(randomForest)
set.seed(1)
obs <- c()
preds <- c()
for(i in 1:10) {
intrain = sample(1:dim(pmltraining)[1], size=dim(pmltraining)[1] * 0.8, replace=F)
train_cross = pmltraining[intrain,]
test_cross = pmltraining[-intrain,]
rf <- randomForest(classe ~ ., data=train_cross)
obs <- c(obs, test_cross$classe)
preds <- c(preds, predict(rf, test_cross))
}
rf
s <- apply(pmltraining,2,function(x) {sum(is.na(x))})
pmltraining <- pmltraining[,which(NAs == 0)]
NAs <- apply(pmltraining,2,function(x) {sum(is.na(x))})
pmltraining <- pmltraining[,which(NAs == 0)]
sum(complete.cases(pmltraining)
X
sum(complete.cases(pmltraining))
library(randomForest)
set.seed(1)
obs <- c()
preds <- c()
for(i in 1:10) {
intrain = sample(1:dim(pmltraining)[1], size=dim(pmltraining)[1] * 0.8, replace=F)
train_cross = pmltraining[intrain,]
test_cross = pmltraining[-intrain,]
rf <- randomForest(classe ~ ., data=train_cross)
obs <- c(obs, test_cross$classe)
preds <- c(preds, predict(rf, test_cross))
}
nrow(pmltraining)
sum(complete.cases(pmltraining))
source('~/.active-rstudio-document', echo=TRUE)
nrow(pmltraining)
sum(complete.cases(pmltraining))
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
foldfit <- train(classe ~ ., data = pmltraining, method="rpart")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest))
print(i)
}
sum(complete.cases(pmltraining))
?predict
?predict.rpart
predict(foldfit, foldtest)
source('~/.active-rstudio-document', echo=TRUE)
predict(foldfit, foldtest)
predict(foldfit, foldtest, drop=FALSE)
library(rpart)
predict.rpart(foldfit, foldtest)
?predict.rpart
class(foldfit)
?predict.train
?predict.rpart
predict.rpart(foldfit, foldtest, na.action=na.pass
c
predict.rpart(foldfit, foldtest, na.action=na.pass)
predict(foldfit, foldtest, na.action=na.pass)
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
foldfit <- train(classe ~ ., data = pmltraining, method="rpart")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest, na.action=na.pass))
print(i)
}
source('~/.active-rstudio-document', echo=TRUE)
conf_mat <- confusionMatrix(table(predicted, observed))
conf_mat <- confusionMatrix(predicted, observed)
conf_mat
head(predicted)
head(observed)
?confusionMatrix
conf_mat <- confusionMatrix(table(predicted, observed))
table(predicted, observed)
NAs <- apply(pmltraining,2,function(x) {sum(is.na(x))})
pmltraining <- pmltraining[,which(NAs == 0)]
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
foldfit <- train(classe ~ ., data = pmltraining, method="rpart")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest, na.action=na.pass))
print(i)
}
table(predicted, observed)
library(randomForest)
set.seed(1)
obs <- c()
preds <- c()
for(i in 1:10) {
intrain = sample(1:dim(pmltraining)[1], size=dim(pmltraining)[1] * 0.8, replace=F)
train_cross = pmltraining[intrain,]
test_cross = pmltraining[-intrain,]
rf <- randomForest(classe ~ ., data=train_cross)
obs <- c(obs, test_cross$classe)
preds <- c(preds, predict(rf, test_cross))
}
table(preds, obs)
testfit <- train(classe ~ ., data = pmltraining, method="rpart")
source('~/.active-rstudio-document', echo=TRUE)
predicted <- c(predicted, predict(testfit, pmltraining, na.action=na.pass))
confusionMatrix(predicted, pmltraining$classe)
pmltraining$classe
predicted
observerd <- pmltraining$classe
observerd
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(predicted, observed)
library(randomForest)
set.seed(1)
obs <- c()
preds <- c()
for(i in 1:10) {
intrain = sample(1:dim(pmltraining)[1], size=dim(pmltraining)[1] * 0.8, replace=F)
train_cross = pmltraining[intrain,]
test_cross = pmltraining[-intrain,]
rf <- randomForest(classe ~ ., data=train_cross)
obs <- c(obs, test_cross$classe)
preds <- c(preds, predict(rf, test_cross))
}
pmltraining$classe
tfit < train(classe ~ ., data=pmltraining, method=rpart)
tfit <- train(classe ~ ., data=pmltraining, method=rpart)
tfit <- train(classe ~ ., data=pmltraining, method="rpart")
tfit
predict(tfit, pmltraining, nna.action = na.pass)
predict(tfit, pmltraining, na.action = na.pass)
pmltraining$classe
tp <- predict(tfit, pmltraining, na.action = na.pass)
tp
confusionMatrix(tp, pmltraining$classe)
tfit <- train(classe ~ ., data=pmltraining, method="rf")
tp <- predict(tfit, pmltraining, na.action = na.pass)
tfit <- train(classe ~ ., data=pmltraining, method="rpart")
tp <- predict(tfit, pmltraining)
confusionMatrix(tp, pmltraining$classe)
nrow(pmltraining)
sum(complete.cases(pmltraining))
complete.cases(pmltraining)
library(randomForest)
rfModel <- randomForest(classe ~ ., data = pmltraining, importance = TRUE, ntrees = 10)
pmltraining<-pmltraining[,colSums(is.na(pmltraining)) == 0]
tfit <- train(classe ~ ., data=pmltraining, method="rpart")
tp <- predict(tfit, pmltraining)
confusionMatrix(tp, pmltraining$classe)
tfit <- train(classe ~ ., data=pmltraining, method="rf")
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(tp, pmltraining$classe)
tp <- predict(tfit, pmltraining, na.action = na.pass)
confusionMatrix(tp, pmltraining$classe)
library(caret)
library(parallel)
library(doParallel)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
library(randomForest)
set.seed(1974)
DataDir <- "Data"
FilePathTrain <- paste(DataDir, "pml-training.csv", sep="/")
FilePathTest <- paste(DataDir, "pml-testing.csv", sep="/")
dir.create(DataDir, showWarnings=FALSE)
## Only download if the file doesnt exist
if (! file.exists(FilePathTrain)){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",FilePathTrain , method="curl")
}
if (! file.exists(FilePathTest)){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",FilePathTest , method="curl")
}
pmltraining <- read.csv(FilePathTrain, stringsAsFactors = FALSE, na.strings = c("", "NA", "#DIV/0!"))
pmltraining <- pmltraining[-(1:7)]
pmltraining <- pmltraining[, colSums(is.na(pmltraining)) != nrow(pmltraining)]
pmltraining$classe <- factor(pmltraining$classe)
columnsToRemove <- grep("^var.*|^stddev.*|^max.*|^min.*|^avg.*|^total.*|.*timestamp.*|user_name",names(pmltraining))
pmltraining <- pmltraining[-columnsToRemove]
last <- ncol(pmltraining)
nzv <- nearZeroVar(pmltraining[,-last], saveMetrics=FALSE)
pmltraining <- pmltraining[,-nzv]
pmltraining<-pmltraining[,colSums(is.na(pmltraining)) == 0]
plot(pmltraining$classe, col="blue", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
model1 <- rpart(classe ~ ., data=pmltraining, method="class")
prediction1 <- predict(model1, pmltraining, type = "class")
confusionMatrix(prediction1, pmltraining$classe)
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
model2 <- randomForest(classe ~. , data=pmltraining, method="class")
prediction2 <- predict(model2, pmltraining, type = "class")
confusionMatrix(prediction2, pmltraining$classe)
model3 <-t rain(classe ~ ., data = pmltraining, method="rf")
prediction3 <- predict(model2, pmltraining, type = "class")
model3 <- train(classe ~ ., data = pmltraining, method="rf")
?train
names(getModelInfo())
?predict
?train
model3 <- train(classe ~ ., data = pmltraining, method="rf")
model3 <- train(classe ~ ., data = pmltraining, method="rpart")
prediction3 <- predict(model2, pmltraining, type = "class")
confusionMatrix(prediction3, pmltraining$classe)
model1 <- rpart(classe ~ ., data=pmltraining, method="class")
prediction1 <- predict(model1, pmltraining, type = "class")
confusionMatrix(prediction1, pmltraining$classe)
library(caret)
library(randomForest)
set.seed(1974)
```
# Data Acquisition
```{r}
# Download the data if we dont have it, then load te training data
DataDir <- "Data"
FilePathTrain <- paste(DataDir, "pml-training.csv", sep="/")
FilePathTest <- paste(DataDir, "pml-testing.csv", sep="/")
dir.create(DataDir, showWarnings=FALSE)
## Only download if the file doesnt exist
if (! file.exists(FilePathTrain)){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",FilePathTrain , method="curl")
}
if (! file.exists(FilePathTest)){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",FilePathTest , method="curl")
}
pmltraining <- read.csv(FilePathTrain, stringsAsFactors = FALSE, na.strings = c("", "NA", "#DIV/0!"))
```
# Exploratory Analysis
We begin by exploring the data in order to get a feel for it.
```{r}
dim(pmltraining)
str(pmltraining)
head(pmltraining,5)
pmltraining <- pmltraining[-(1:7)]
pmltraining <- pmltraining[, colSums(is.na(pmltraining)) != nrow(pmltraining)]
pmltraining$classe <- factor(pmltraining$classe)
columnsToRemove <- grep("^var.*|^stddev.*|^max.*|^min.*|^avg.*|^total.*|.*timestamp.*|user_name",names(pmltraining))
pmltraining <- pmltraining[-columnsToRemove]
last <- ncol(pmltraining)
nzv <- nearZeroVar(pmltraining[,-last], saveMetrics=FALSE)
pmltraining <- pmltraining[,-nzv]
colSums(is.na{pmltraining})
colSums(is.na(pmltraining))
nrow(pmltraining)
colSums(is.na(pmltraining))
ncol(pmltraining)
colSums(is.na(pmltraining))
nrow(pmltraining)
colSums(is.na(pmltraining))
colSums(is.na(pmltraining))/nrow(pmltraining)
pmltraining <- pmltraining[, colSums(is.na(pmltraining))/nrow(pmltraining) <= .75]
colSums(is.na(pmltraining))/nrow(pmltraining)
colSums(is.na(pmltraining))
progress.bar <- create_progress_bar("text")
names(pmltraining)
ncol(pmltraining)
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
last <- ncol(foldtest)
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
foldfit <- train(classe ~ ., data = foldtrain, method="rpart")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest[-last]))
print(i)
}
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
last <- ncol(foldtest)
foldfit <- train(classe ~ ., data = foldtrain, method="rpart")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest[-last]))
print(i)
}
observed - predicted
results <- cbind(observed,predicted)
names(results) <- c("observed", "predicted")
results$Difference <- abs(result$Actual - result$Predicted)
results$Difference <- abs(results$Actual - results$Predicted)
results$Difference <- abs(results$observed - results$predicted)
class(results)
results <- as.data.frame(cbind(observed,predicted))
names(results) <- c("observed", "predicted")
results$Difference <- abs(results$observed - results$predicted)
View(results)
summary(result$Difference)
summary(results$Difference)
sqrt(mean((results$observed - results$predicted)^2))
#Creating a progress bar to know the status of CV
#progress.bar <- create_progress_bar("text")
#progress.bar$init(k)
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
last <- ncol(foldtest)
foldfit <- train(classe ~ ., data = foldtrain, method="rf")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest[-last]))
print(i)
}
#Creating a progress bar to know the status of CV
#progress.bar <- create_progress_bar("text")
#progress.bar$init(k)
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
last <- ncol(foldtest)
foldfit <- train(classe ~ ., data = foldtrain, method="rf", preProcess = NULL)
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest[-last]))
print(i)
}
#Creating a progress bar to know the status of CV
#progress.bar <- create_progress_bar("text")
#progress.bar$init(k)
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
last <- ncol(foldtest)
#foldfit <- train(classe ~ ., data = foldtrain, method="rf", preProcess = NULL)
foldfit <- randomForest(classe ~ ., data=foldtrain, method="class")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest[-last]))
print(i)
}
results <- as.data.frame(cbind(observed,predicted))
names(results) <- c("observed", "predicted")
results$Difference <- abs(results$observed - results$predicted)
summary(results$Difference)
sqrt(mean((results$observed - results$predicted)^2))
#Creating a progress bar to know the status of CV
#progress.bar <- create_progress_bar("text")
#progress.bar$init(k)
observed <- c()
predicted <- c()
folds <- createFolds(y=pmltraining$classe, k=10, list = TRUE, returnTrain = TRUE)
for (i in 1:10){
foldtrain <- pmltraining[folds[[i]],]
foldtest <- pmltraining[-folds[[i]],]
last <- ncol(foldtest)
#foldfit <- train(classe ~ ., data = foldtrain, method="rf", preProcess = NULL)
foldfit <- rpart(classe ~ ., data=foldtrain, method="class")
observed <- c(observed, foldtest$classe)
predicted <- c(predicted, predict(foldfit, foldtest[-last]))
print(i)
}
results <- as.data.frame(cbind(observed,predicted))
names(results) <- c("observed", "predicted")
results$Difference <- abs(results$observed - results$predicted)
summary(results$Difference)
sqrt(mean((results$observed - results$predicted)^2))
library(slidify)
slidify("index.Rmd")
setwd("/Users/Sean/Coursera_DataScience/JHU-Dev-Data-Prods-Project/Modelling_mtcars_deck")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
install.packages("slidifyExamples")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title = "Model Fuel Efficiency Using the mtcars Dataset and Shiny", "index.html", host="rpubs")
slidify("index.Rmd")
browseURL("index.html")
publish(title = "Model Fuel Efficiency Using the mtcars Dataset and Shiny", "index.html", host="rpubs")
publish(title = "Model Fuel Efficiency Using the mtcars Dataset and Shiny", "index.html", host="rpubs")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title = "Model Fuel Efficiency Using the mtcars Dataset and Shiny", "index.html", host="rpubs")
publish(title = "Model Fuel Efficiency Using the mtcars Dataset and Shiny", "index.html", host="rpubs")
